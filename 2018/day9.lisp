(defun insert-list (ls num last-ind)
  (cond ((= (1- (length ls)) last-ind)
		 (values (cons (car ls)
					   (cons num (cdr ls)))
				 1))
		(t
		 (values (append (subseq ls 0 (+ 2 last-ind))
						 (list num)
						 (subseq ls (+ 2 last-ind)))
				 (+ 2 last-ind)))))

(defun insert-list-when-23 (ls num last-ind)
  (let ((ind (if (>= last-ind 7)
			   (- last-ind 7)
			   (- (length ls) (- 7 last-ind)))))
	(values (append (subseq ls 0 ind)
					(subseq ls (+ ind 1)))
			(+ num (nth ind ls))
			ind)))

(defun test-insert-list ()
  (do ((l '(0))
	   (num 1 (1+ num))
	   (ind 0))
	  ((= 26 num) l)
	(print l)
	(let (new-l new-ind)
	  (multiple-value-setq (new-l new-ind) (insert-list l num ind))
	  (setf l new-l
			ind new-ind))))

(defun day9 (player-num marble-num)
  (let ((player-points (make-hash-table)))
	(do ((l '(0))
		 (ind 0)
		 (player-n 1 (if (> (1+ player-n) player-num )
						 1
						 (1+ player-n)))
		 (marble 1 (1+ marble)))
		((= marble (1+ marble-num)) l)
	  (let (new-l new-ind 23num)
		(if (/= 0 (mod marble 23))
			(multiple-value-setq (new-l new-ind) (insert-list l marble ind))
			(progn (multiple-value-setq (new-l 23num new-ind) (insert-list-when-23 l marble ind))
				   (setf (gethash player-n player-points)
						 (+ (gethash player-n player-points 0) 23num))))
		(setf l new-l
			  ind new-ind)
		;;(format t "[~d] ~a~%" player-n l)
		))
	(sort (loop
			 for k being the hash-keys of player-points
			 using (hash-value v)
			 collect (list k v)) #'> :key #'cadr)))
